
# 1 "C:\PIC_PROGS\ProyectoMicros\PIC\simplec1.1.c"

# 19 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\legacy/pic16f887.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;

volatile unsigned char PORTD @ 0x008;

volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;
volatile unsigned char SSPBUF @ 0x013;
volatile unsigned char SSPCON @ 0x014;
volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;
volatile unsigned char RCSTA @ 0x018;
volatile unsigned char TXREG @ 0x019;
volatile unsigned char RCREG @ 0x01A;
volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;
volatile unsigned char OPTION @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;

volatile unsigned char TRISD @ 0x088;

volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;
volatile unsigned char PCON @ 0x08E;
volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;
volatile unsigned char SSPCON2 @ 0x091;
volatile unsigned char PR2 @ 0x092;
volatile unsigned char SSPADD @ 0x093;
volatile unsigned char SSPMSK @ 0x093;
volatile unsigned char SSPSTAT @ 0x094;
volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;
volatile unsigned char VRCON @ 0x097;
volatile unsigned char TXSTA @ 0x098;
volatile unsigned char SPBRG @ 0x099;
volatile unsigned char SPBRGH @ 0x09A;
volatile unsigned char PWM1CON @ 0x09B;
volatile unsigned char ECCPAS @ 0x09C;
volatile unsigned char PSTRCON @ 0x09D;
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;
volatile unsigned char WDTCON @ 0x105;
volatile unsigned char CM1CON0 @ 0x107;
volatile unsigned char CM2CON0 @ 0x108;
volatile unsigned char CM2CON1 @ 0x109;
volatile unsigned char EEDAT @ 0x10C;

volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;

volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;
volatile unsigned char SRCON @ 0x185;
volatile unsigned char BAUDCTL @ 0x187;
volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;
volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;



volatile bit RD0 @ ((unsigned)&PORTD*8)+0;
volatile bit RD1 @ ((unsigned)&PORTD*8)+1;
volatile bit RD2 @ ((unsigned)&PORTD*8)+2;
volatile bit RD3 @ ((unsigned)&PORTD*8)+3;
volatile bit RD4 @ ((unsigned)&PORTD*8)+4;
volatile bit RD5 @ ((unsigned)&PORTD*8)+5;
volatile bit RD6 @ ((unsigned)&PORTD*8)+6;
volatile bit RD7 @ ((unsigned)&PORTD*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;

volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit ULPWUIF @ ((unsigned)&PIR2*8)+2;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;
volatile bit OSFIF @ ((unsigned)&PIR2*8)+7;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;
volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;


volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;


volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit ADDEN @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;


volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit CCP2Y @ ((unsigned)&CCP2CON*8)+4;
volatile bit CCP2X @ ((unsigned)&CCP2CON*8)+5;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION*8)+2;
volatile bit PSA @ ((unsigned)&OPTION*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISD0 @ ((unsigned)&TRISD*8)+0;
volatile bit TRISD1 @ ((unsigned)&TRISD*8)+1;
volatile bit TRISD2 @ ((unsigned)&TRISD*8)+2;
volatile bit TRISD3 @ ((unsigned)&TRISD*8)+3;
volatile bit TRISD4 @ ((unsigned)&TRISD*8)+4;
volatile bit TRISD5 @ ((unsigned)&TRISD*8)+5;
volatile bit TRISD6 @ ((unsigned)&TRISD*8)+6;
volatile bit TRISD7 @ ((unsigned)&TRISD*8)+7;


volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;

volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit ULPWUIE @ ((unsigned)&PIE2*8)+2;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;
volatile bit OSFIE @ ((unsigned)&PIE2*8)+7;


volatile bit BOR @ ((unsigned)&PCON*8)+0;
volatile bit POR @ ((unsigned)&PCON*8)+1;
volatile bit SBOREN @ ((unsigned)&PCON*8)+4;
volatile bit ULPWUE @ ((unsigned)&PCON*8)+5;


volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit LTS @ ((unsigned)&OSCCON*8)+1;
volatile bit HTS @ ((unsigned)&OSCCON*8)+2;
volatile bit OSTS @ ((unsigned)&OSCCON*8)+3;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit RW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit DA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;


volatile bit VR0 @ ((unsigned)&VRCON*8)+0;
volatile bit VR1 @ ((unsigned)&VRCON*8)+1;
volatile bit VR2 @ ((unsigned)&VRCON*8)+2;
volatile bit VR3 @ ((unsigned)&VRCON*8)+3;
volatile bit VRSS @ ((unsigned)&VRCON*8)+4;
volatile bit VRR @ ((unsigned)&VRCON*8)+5;
volatile bit VROE @ ((unsigned)&VRCON*8)+6;
volatile bit VREN @ ((unsigned)&VRCON*8)+7;


volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit SENDB @ ((unsigned)&TXSTA*8)+3;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;


volatile bit BRG0 @ ((unsigned)&SPBRG*8)+0;
volatile bit BRG1 @ ((unsigned)&SPBRG*8)+1;
volatile bit BRG2 @ ((unsigned)&SPBRG*8)+2;
volatile bit BRG3 @ ((unsigned)&SPBRG*8)+3;
volatile bit BRG4 @ ((unsigned)&SPBRG*8)+4;
volatile bit BRG5 @ ((unsigned)&SPBRG*8)+5;
volatile bit BRG6 @ ((unsigned)&SPBRG*8)+6;
volatile bit BRG7 @ ((unsigned)&SPBRG*8)+7;


volatile bit BRG8 @ ((unsigned)&SPBRGH*8)+0;
volatile bit BRG9 @ ((unsigned)&SPBRGH*8)+1;
volatile bit BRG10 @ ((unsigned)&SPBRGH*8)+2;
volatile bit BRG11 @ ((unsigned)&SPBRGH*8)+3;
volatile bit BRG12 @ ((unsigned)&SPBRGH*8)+4;
volatile bit BRG13 @ ((unsigned)&SPBRGH*8)+5;
volatile bit BRG14 @ ((unsigned)&SPBRGH*8)+6;
volatile bit BRG15 @ ((unsigned)&SPBRGH*8)+7;


volatile bit PDC0 @ ((unsigned)&PWM1CON*8)+0;
volatile bit PDC1 @ ((unsigned)&PWM1CON*8)+1;
volatile bit PDC2 @ ((unsigned)&PWM1CON*8)+2;
volatile bit PDC3 @ ((unsigned)&PWM1CON*8)+3;
volatile bit PDC4 @ ((unsigned)&PWM1CON*8)+4;
volatile bit PDC5 @ ((unsigned)&PWM1CON*8)+5;
volatile bit PDC6 @ ((unsigned)&PWM1CON*8)+6;
volatile bit PRSEN @ ((unsigned)&PWM1CON*8)+7;


volatile bit PSSBD0 @ ((unsigned)&ECCPAS*8)+0;
volatile bit PSSBD1 @ ((unsigned)&ECCPAS*8)+1;
volatile bit PSSAC0 @ ((unsigned)&ECCPAS*8)+2;
volatile bit PSSAC1 @ ((unsigned)&ECCPAS*8)+3;
volatile bit ECCPAS0 @ ((unsigned)&ECCPAS*8)+4;
volatile bit ECCPAS1 @ ((unsigned)&ECCPAS*8)+5;
volatile bit ECCPAS2 @ ((unsigned)&ECCPAS*8)+6;
volatile bit ECCPASE @ ((unsigned)&ECCPAS*8)+7;


volatile bit STRA @ ((unsigned)&PSTRCON*8)+0;
volatile bit STRB @ ((unsigned)&PSTRCON*8)+1;
volatile bit STRC @ ((unsigned)&PSTRCON*8)+2;
volatile bit STRD @ ((unsigned)&PSTRCON*8)+3;
volatile bit STRSYNC @ ((unsigned)&PSTRCON*8)+4;


volatile bit VCFG0 @ ((unsigned)&ADCON1*8)+4;
volatile bit VCFG1 @ ((unsigned)&ADCON1*8)+5;
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;
volatile bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
volatile bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
volatile bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
volatile bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;


volatile bit C1CH0 @ ((unsigned)&CM1CON0*8)+0;
volatile bit C1CH1 @ ((unsigned)&CM1CON0*8)+1;
volatile bit C1R @ ((unsigned)&CM1CON0*8)+2;
volatile bit C1POL @ ((unsigned)&CM1CON0*8)+4;
volatile bit C1OE @ ((unsigned)&CM1CON0*8)+5;
volatile bit C1OUT @ ((unsigned)&CM1CON0*8)+6;
volatile bit C1ON @ ((unsigned)&CM1CON0*8)+7;


volatile bit C2CH0 @ ((unsigned)&CM2CON0*8)+0;
volatile bit C2CH1 @ ((unsigned)&CM2CON0*8)+1;
volatile bit C2R @ ((unsigned)&CM2CON0*8)+2;
volatile bit C2POL @ ((unsigned)&CM2CON0*8)+4;
volatile bit C2OE @ ((unsigned)&CM2CON0*8)+5;
volatile bit C2OUT @ ((unsigned)&CM2CON0*8)+6;
volatile bit C2ON @ ((unsigned)&CM2CON0*8)+7;


volatile bit C2SYNC @ ((unsigned)&CM2CON1*8)+0;
volatile bit T1GSS @ ((unsigned)&CM2CON1*8)+1;
volatile bit C2RSEL @ ((unsigned)&CM2CON1*8)+4;
volatile bit C1RSEL @ ((unsigned)&CM2CON1*8)+5;
volatile bit MC2OUT @ ((unsigned)&CM2CON1*8)+6;
volatile bit MC1OUT @ ((unsigned)&CM2CON1*8)+7;


volatile bit FVREN @ ((unsigned)&SRCON*8)+0;
volatile bit PULSR @ ((unsigned)&SRCON*8)+2;
volatile bit PULSS @ ((unsigned)&SRCON*8)+3;
volatile bit C2REN @ ((unsigned)&SRCON*8)+4;
volatile bit C1SEN @ ((unsigned)&SRCON*8)+5;
volatile bit SR0 @ ((unsigned)&SRCON*8)+6;
volatile bit SR1 @ ((unsigned)&SRCON*8)+7;


volatile bit ABDEN @ ((unsigned)&BAUDCTL*8)+0;
volatile bit WUE @ ((unsigned)&BAUDCTL*8)+1;
volatile bit BRG16 @ ((unsigned)&BAUDCTL*8)+3;
volatile bit SCKP @ ((unsigned)&BAUDCTL*8)+4;
volatile bit RCIDL @ ((unsigned)&BAUDCTL*8)+6;
volatile bit ABDOVF @ ((unsigned)&BAUDCTL*8)+7;


volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;

volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;



volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 12 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 31 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 78 "C:\PIC_PROGS\ProyectoMicros\PIC\simplec1.1.h"
void init_micro(void);
void usecbase(void);
void pauseus ( unsigned int usvalue );
void msecbase(void);
void pause( unsigned long usvalue );
void high(char pin);
void low(char pin);
char input(char pin);
void pulseout(char pin, unsigned long per);
void lcd_write(unsigned char c);
void lcd_clear(void);
void lcd_text(const char * s);
void lcd_symbol(char c);
void lcd_goto(unsigned char pos);
void lcd_number(char c);
void lcd_init();
void init_serial(int baud);
void putch(unsigned char byte);
unsigned char getch();
void spi_init(void);
char SPI_OUTPUT ( char spi_byte );
void WR_BYTE ( char EE_address, char EE_data );
char RD_BYTE ( char EE_address );
void WR_MCP23S08 ( char regist, char data );
char RD_MCP23S08 ( char regist );
void pwmout1 (char duty, int freq);
void pwmout2 (char duty, int freq);
char adcin (char chan);
void i2c_init();
void i2c_waitForIdle();
void i2c_start();
void i2c_repStart();
void i2c_stop();
int i2c_read( unsigned char ack );
unsigned char i2c_write( unsigned char i2cWriteData );
void I2C_EEOUT (unsigned char address, unsigned char data);
unsigned char I2C_EEIN(unsigned char address);

# 10 "C:\PIC_PROGS\ProyectoMicros\PIC\simplec1.1.c"
void init_micro(void)
{
ANSEL = 0;
ANSELH = 0;
CM1CON0 = 0;
CM2CON0 = 0;




INTCON=0;
}

# 40
void usecbase(void)
{
OPTION = 0b00001000;
TMR0 = 0xF7;
while(!T0IF);
T0IF = 0;
}

# 53
void pauseus ( unsigned int usvalue )

{
unsigned int x;

for (x=0; x<=usvalue; x++)
{
usecbase();
}
}

# 80
void msecbase(void)
{
OPTION = 0b00000011;
TMR0 = 0xD;
while(!T0IF);
T0IF = 0;
}

# 95
void pause( unsigned long usvalue )

{
unsigned long x;
for (x=1; x<=(usvalue); x++)
{
msecbase();
}
}

# 109
void high(char pin)
{
switch(pin)
{
case 0:
TRISC7 = 0;
RC7 = 1;
break;

case 1:
TRISC6 = 0;
RC6 = 1;
break;

case 2:
TRISC5 = 0;
RC5 = 1;
break;

case 3:
TRISC4 = 0;
RC4 = 1;
break;

case 4:
TRISC3 = 0;
RC3 = 1;
break;

case 5:
TRISC2 = 0;
RC2 = 1;
break;

case 6:
TRISC1 = 0;
RC1 = 1;
break;

case 7:
TRISC0 = 0;
RC0 = 1;
break;

case 8:
TRISB0 = 0;
RB0 = 1;
break;

case 9:
TRISB1 = 0;
RB1 = 1;
break;

case 10:
TRISB2 = 0;
RB2 = 1;
break;

case 11:
TRISB3 = 0;
RB3 = 1;
break;

case 12:
TRISB4 = 0;
RB4 = 1;
break;

case 13:
TRISB5 = 0;
RB5 = 1;
break;


default:
break;
}
}

# 193
void low(char pin)
{
switch(pin)
{
case 0:
TRISC7 = 0;
RC7 = 0;
break;

case 1:
TRISC6 = 0;
RC6 = 0;
break;

case 2:
TRISC5 = 0;
RC5 = 0;
break;

case 3:
TRISC4 = 0;
RC4 = 0;
break;

case 4:
TRISC3 = 0;
RC3 = 0;
break;

case 5:
TRISC2 = 0;
RC2 = 0;
break;

case 6:
TRISC1 = 0;
RC1 = 0;
break;

case 7:
TRISC0 = 0;
RC0 = 0;
break;

case 8:
TRISB0 = 0;
RB0 = 0;
break;

case 9:
TRISB1 = 0;
RB1 = 0;
break;

case 10:
TRISB2 = 0;
RB2 = 0;
break;

case 11:
TRISB3 = 0;
RB3 = 0;
break;

case 12:
TRISB4 = 0;
RB4 = 0;
break;

case 13:
TRISB5 = 0;
RB5 = 0;
break;


default:
break;
}
}

# 277
char input(char pin)
{
char val = 0;
switch(pin)
{
case 0:
TRISC7 = 1;
if (RC7 == 1)
{val = 1;}
else
{val = 0;}
break;

case 1:
TRISC6 = 1;
if (RC6 == 1)
{val = 1;}
else
{val = 0;}
break;

case 2:
TRISC5 = 1;
if (RC5 == 1)
{val = 1;}
else
{val = 0;}
break;

case 3:
TRISC4 = 1;
if (RC4 == 1)
{val = 1;}
else
{val = 0;}
break;

case 4:
TRISC3 = 1;
if (RC3 == 1)
{val = 1;}
else
{val = 0;}
break;

case 5:
TRISC2 = 1;
if (RC2 == 1)
{val = 1;}
else
{val = 0;}
break;

case 6:
TRISC1 = 1;
if (RC1 == 1)
{val = 1;}
else
{val = 0;}
break;

case 7:
TRISC0 = 1;
if (RC0 == 1)
{val = 1;}
else
{val = 0;}
break;

case 8:
TRISB0 = 1;
if (RB0 == 1)
{val = 1;}
else
{val = 0;}
break;

case 9:
TRISB1 = 1;
if (RB1 == 1)
{val = 1;}
else
{val = 0;}
break;

case 10:
TRISB2 = 1;
if (RB2 == 1)
{val = 1;}
else
{val = 0;}
break;

case 11:
TRISB3 = 1;
if (RB3 == 1)
{val = 1;}
else
{val = 0;}
break;

case 12:
TRISB4 = 1;
if (RB4 == 1)
{val = 1;}
else
{val = 0;}
break;

case 13:
TRISB5 = 1;
if (RB5 == 1)
{val = 1;}
else
{val = 0;}
break;


default:
break;
}

return val;
}

# 406
void pulseout(char pin, unsigned long per)
{
switch(pin)
{
case 0:
TRISC7 = 0;
RC7 = 1;
pauseus(per);
RC7 = 0;
break;

case 1:
TRISC6 = 0;
RC6 = 1;
pauseus(per);
RC6 = 0;
break;

case 2:
TRISC5 = 0;
RC5 = 1;
pauseus(per);
RC5 = 0;
break;

case 3:
TRISC4 = 0;
RC4 = 1;
pauseus(per);
RC4 = 0;
break;

case 4:
TRISC3 = 0;
RC3 = 1;
pauseus(per);
RC3 = 0;
break;

case 5:
TRISC2 = 0;
RC2 = 1;
pauseus(per);
RC2 = 0;
break;

case 6:
TRISC1 = 0;
RC1 = 1;
pauseus(per);
RC1 = 0;
break;

case 7:
TRISC0 = 0;
RC0 = 1;
pauseus(per);
RC0 = 0;
break;

case 8:
TRISB0 = 0;
RB0 = 1;
pauseus(per);
RB0 = 0;
break;

case 9:
TRISB1 = 0;
RB1 = 1;
pauseus(per);
RB1 = 0;
break;

case 10:
TRISB2 = 0;
RB2 = 1;
pauseus(per);
RB2 = 0;
break;

case 11:
TRISB3 = 0;
RB3 = 1;
pauseus(per);
RB3 = 0;
break;

case 12:
TRISB4 = 0;
RB4 = 1;
pauseus(per);
RB4 = 0;
break;

case 13:
TRISB5 = 0;
RB5 = 1;
pauseus(per);
RB5 = 0;
break;


default:
break;
}
}

# 520
void
lcd_write(unsigned char c)
{


char temp = ( ( ( c >> 4 ) & 0x0F );
PORTB = PORTB & 0xF0;
PORTB = PORTB + temp;
((RB5 = 1),(pause(10),(RB5=0));

temp = ( c & 0x0F );
PORTB = PORTB & 0xF0;
PORTB = PORTB + temp;
((RB5 = 1),(pause(10),(RB5=0));
}

# 540
void
lcd_clear(void)
{
RB4 = 0;
lcd_write(0x1);

}

# 553
void
lcd_text(const char * s)
{
RB4 = 1;
while(*s)
lcd_write(*s++);
}

# 567
void
lcd_symbol(char c)
{
RB4 = 1;
lcd_write( c );
}

# 579
void
lcd_goto(unsigned char pos)
{
RB4 = 0;
lcd_write(0x80+pos);
}

# 590
void
lcd_number(char c)
{
char hund = c/100;
char tens = (c % 100)/10;
char ones = (c % 100) % 10;
RB4 = 1;
lcd_write(hund + 0x30);
lcd_write(tens + 0x30);
lcd_write(ones + 0x30);
}

# 608
void
lcd_init()
{

TRISB = 0;

# 618
RB4 = 0;
RB5 = 0;
RB6 = 0;

char init_value = 0x3;

pause (15);
char temp = init_value;
PORTB = PORTB & 0xF0;
PORTB = PORTB + temp;
((RB5 = 1),(pause(10),(RB5=0));
pause(10);
((RB5 = 1),(pause(10),(RB5=0));
pause(10);
((RB5 = 1),(pause(10),(RB5=0));
pause(10);
char temp = 2;
PORTB = PORTB & 0xF0;
PORTB = PORTB + temp;
((RB5 = 1),(pause(10),(RB5=0));

lcd_write(0x28);

lcd_write(0xF);
lcd_clear();
lcd_write(0x6);
}

# 654
void init_serial(int baud)
{
TRISC7 = 1;
TRISC6 = 0;
if (baud == 2400)
{SPBRG = 103;}
else
{SPBRG = 25;}


RCSTA = 0x90;
TXSTA = 0x20;
BAUDCTL = 0;
}

# 673
void
putch(unsigned char byte)
{

while(!TXIF)
continue;
TXREG = byte;
}

# 687
unsigned char
getch()
{

while(!RCIF)
continue;
return RCREG;
}

# 701
void spi_init(void)
{

# 708
TRISC5 = 0;
TRISC3 = 0;
TRISA5 = 0;




SSPCON = 0b00000010;
CKP = 0;


SMP = 1;
CKE = 1;


SSPEN = 1;
pause(1);
}

# 731
char SPI_OUTPUT ( char spi_byte )
{
SSPBUF = spi_byte;
do {
}
while(!BF);
return SSPBUF;
}

# 746
void WR_BYTE ( char EE_address, char EE_data )
{
char dummy;
RA5 = 0;
dummy = SPI_OUTPUT ( 0x06 );
RA5 = 1;
pause(5);
RA5 = 0;
dummy = SPI_OUTPUT ( 0x02 );
dummy = SPI_OUTPUT ( EE_address );
dummy = SPI_OUTPUT ( EE_data );
RA5 = 1;

}

# 767
char RD_BYTE ( char EE_address )
{
char dummy;
char spi_received = 0;
RA5 = 0;
dummy = SPI_OUTPUT (0x03);
dummy = SPI_OUTPUT (EE_address );
spi_received = SPI_OUTPUT ( 0x00 );
RA5 = 1;


return spi_received;
}

# 785
void WR_MCP23S08 ( char regist, char data )
{
char dummy;
RA5 = 0;
dummy = SPI_OUTPUT ( 0x40 );
dummy = SPI_OUTPUT ( regist );
dummy = SPI_OUTPUT ( data );
RA5 = 1;

}

# 800
char RD_MCP23S08 ( char regist )
{
char dummy;
RA5 = 0;
dummy = SPI_OUTPUT (0x41);
dummy = SPI_OUTPUT (regist);
char data = SPI_OUTPUT ( 0x00 );
RA5 = 1;
return data;
}



void pwmout1 (char duty, int freq)
{
TRISC2 = 1;
CCP1CON = 0;


PR2 = (250000/freq)-1;
CCPR1L = ((duty*(PR2+1))/100);
TMR2IE = 0;
T2CKPS0 = 1;
T2CKPS1 = 1;
CCP1CON = 0b00001100;
TMR2ON = 1;

while (TMR2IF ==0)
{}

TRISC2 = 0;
}




void pwmout2 (char duty, int freq)
{
TRISC1 = 1;
CCP2CON = 0;

PR2 = (250000/freq)-1;
CCPR2L = ((duty*(PR2+1))/100);
TMR2IE = 0;
T2CKPS0 = 1;
T2CKPS1 = 1;
CCP2CON = 0b00001100;
TMR2ON = 1;

while (TMR2IF ==0)
{}

TRISC1 = 0;
}




char adcin (char chan)
{
switch(chan)
{
case 0:
TRISA0 = 1;
ANS0 = 1;
ADCON0 = 0b11000000;
break;

case 1:
TRISA1 = 1;
ANS1 = 1;
ADCON0 = 0b11000100;
break;

case 2:
TRISA2 = 1;
ANS2 = 1;
ADCON0 = 0b11001000;
break;

case 3:
TRISA3 = 1;
ANS3 = 1;
ADCON0 = 0b11001100;
break;

case 4:
TRISA5 = 1;
ANS4 = 1;
ADCON0 = 0b11010000;
break;

default:
break;
}

ADON = 1;
pause (1);
GODONE = 1;
while(GODONE == 1);
char value = ADRESH;
return value;

}

# 918
void i2c_init()
{
TRISC3=1;
TRISC4=1;

SSPCON = 0x38;
SSPCON2 = 0x00;


SSPADD = 0x27;


CKE=1;
SMP=1;

SSPIF=0;
BCLIF=0;
}



void i2c_waitForIdle()
{
while (( SSPCON2 & 0x1F ) | RW ) {};
}



void i2c_start()
{
i2c_waitForIdle();
SEN=1;
}



void i2c_repStart()
{
i2c_waitForIdle();
RSEN=1;
}



void i2c_stop()
{
i2c_waitForIdle();
PEN=1;
}



int i2c_read( unsigned char ack )
{
unsigned char i2cReadData;

i2c_waitForIdle();

RCEN=1;

i2c_waitForIdle();

i2cReadData = SSPBUF;

i2c_waitForIdle();

if ( ack )
{
ACKDT=0;
}
else
{
ACKDT=1;
}
ACKEN=1;

return( i2cReadData );
}



unsigned char i2c_write( unsigned char i2cWriteData )
{
i2c_waitForIdle();
SSPBUF = i2cWriteData;

return ( ! ACKSTAT );
}

# 1012
void I2C_EEOUT(unsigned char address, unsigned char data)
{
i2c_start();
i2c_write(0xa0);
i2c_write(address);
i2c_write(data);
i2c_stop();
pause(11);
}

# 1027
unsigned char I2C_EEIN(unsigned char address)
{
unsigned char data;

i2c_start();
i2c_write(0xa0);
i2c_write(address);
i2c_repStart();
i2c_write(0xa1);
data=i2c_read(0);
i2c_stop();
return(data);
}
